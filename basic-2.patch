From acc6028558fb23ebb9c81ff583a78355589b979e Mon Sep 17 00:00:00 2001
From: AntuVenciu <anoinev151@gmail.com>
Date: Mon, 11 Oct 2021 15:41:09 +0200
Subject: [PATCH] Assignment basic number 2. Definition of a Particle class.
To: antoinev151@gmail.com

---
 basic-2/basic-2.py | 87 ++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 87 insertions(+)
 create mode 100644 basic-2/basic-2.py

diff --git a/basic-2/basic-2.py b/basic-2/basic-2.py
new file mode 100644
index 0000000..bb12e05
--- /dev/null
+++ b/basic-2/basic-2.py
@@ -0,0 +1,87 @@
+"""Classe che descrive una generica particella"""
+
+import logging
+
+import math
+
+
+class Particle:
+
+    def __init__(self, mass, charge, name, momentum = 0.):
+        """mass= massa della particella espressa in Mev/c^2
+           charge=carica della particella in unità di e
+           name=nome della particella
+           momentum=impulso della particella in unità di MeV/c
+           """
+        self.mass = mass
+        self.charge = charge
+        self.name = name
+        self.momentum = momentum
+
+    def info(self):
+
+        """Stampa le 4 proprietà della particella""" 
+
+        information = 'Particle {} of mass {} MeV c^2, charge {} and momentum {} MeV/c'
+        return information.format(self.name, self.mass, self.charge, self.momentum)
+    
+    def __repr__(self):
+
+        return '{}(name = {}, mass = {}, charge = {}, momentum =\ {})'\.format('Particle', self.name, self.mass, self.charge, self.momentum)
+
+    @property 
+    def energy(self):
+        """Energia della particella in MeV"""
+        return math.sqrt(self.mass**2 + self.momentum**2)
+
+    @energy.setter
+    def energy(self, energy):
+        """set the particle energy"""
+        if energy<self.mass: logging.error("Viola la relazione di Einstein!")
+        else:
+            self.momentum = math.sqrt(energy**2-self.mass**2)
+
+    @property
+    def momentum(self):
+        return self._momentum
+
+    @momentum.setter
+    def momentum(self, momentum):
+        if momentum <0.: logging.error("Impulso negativo!")
+        else: self._momentum = momentum
+
+
+    @property
+    def beta(self):
+        return self.momentum/self.energy
+
+
+    @beta.setter
+    def beta(self, beta):
+        if beta <0. or beta >1:
+            logging.error("Valore errato per beta!")
+        else: 
+            self.momentum = beta*(1/(math.sqrt(1-beta**2)))*self.mass
+
+
+class Proton(Particle):
+
+    """classe che descrive una Particle chiamata Protone con le sue proprietà di particella"""
+
+    NAME = 'Proton'
+    MASS = 937 #MeV c^2
+    CHARGE = +1 #e
+
+    def __init__(self, momentum=0.):
+        super().__init__(self.NAME, self.MASS, self.CHARGE, momentum)
+
+
+class Alpha(Particle):
+    """classe che descrive una Particle chiamata Alpha con le sue proprietà di particella"""
+    NAME = 'Alpha particle'
+    MASS = 3600 #MeV c^2
+    CHARGE = +2 #e
+
+    def __init__(self, momentum=0.):
+        super().__init__(self.MASS, self.CHARGE, self.NAME,  momentum)
+
-- 
2.33.0.windows.2

